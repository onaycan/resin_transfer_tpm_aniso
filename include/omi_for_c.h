#ifndef FOR_C_H
#define FOR_C_H



/******************************************************************************
 * Common definitions for FORTRAN-to-C language extension facility.           * 
 *                                                                            *
 * Functions callable for FORTRAN must be declared as follows:                * 
 *   ... FOR_NAME(subnam,SUBNAM)(...)                                         *
 * The FOR_NAME macro allows system-dependent handling of function names to   * 
 * be implemented entirely through this header file.			      * 
 *									      * 
 * The FOR_TRAIL compilation option should be invoked on systems which	      * 
 * require an underscore to be appended to FORTRAN entry point symbols.	      *
 * This is common among UNIX systems.                                         * 
 ******************************************************************************/
#if defined FOR_TRAIL
#define FOR_NAME(lc_name,uc_name) lc_name ## _
#define CALL_NAME(lc_name,uc_name) lc_name ## _

#elif defined _SHARED_V5_
#define FOR_NAME(lc_name,uc_name) _cdecl lc_name
#define CALL_NAME(lc_name,uc_name) lc_name

#elif defined HKS_NT
#define FOR_NAME(lc_name,uc_name) _stdcall uc_name
#define CALL_NAME(lc_name,uc_name) uc_name

#else
#define FOR_NAME(lc_name,uc_name) lc_name
#define CALL_NAME(lc_name,uc_name) lc_name
#endif


/******************************************************************************
 * The rules for passing type CHARACTER from FORTRAN to C are as follows:     *
 *   1) All type CHARACTER arguments must appear before any other arguments   *
 *      in the list. The parameter should be declared as type "Character".    *
 *   2) A Length parameter for each Character parameter must be appended to   *
 *	the C parameter list. The name of the Length parameter should be      *
 *	constructed by adding "_len" to the Character parameter name.	      *
 *   3) The CHARACTER data must be accessed via the PTR(cname) macro, which   *
 *	defines a pointer to cname.					      *
 *   4) The length of the CHARACTER string may be obtained via the	      *
 *	LEN(cname,cnname_len) macro, which defines the length of cname.	      *
 * This allows capture of the ancilliary length arguments generated by UNIX   *
 * and C/370 systems. The VMS implementation ignores these extra parameters.  *
 ******************************************************************************/

/* Begin local includes */
#if defined(ABQ_WIN86_64) || defined(ABQ_WIN86_32)
#include <omi_types.h>
#endif
#if defined(ABQ_WIN86_64)
typedef char *Character;
typedef int64 Length;
#define PTR(id) id
#define LEN(id,len) len
#define GETLEN(id) id ## _len
#define CHNAME(id) Character id
#define CHNAME_C(id) id
#define CHLEN(id) , const Length id ## _len
#define CHLEN_C(id) , id ## _len
#elif defined(ABQ_WIN86_32)
typedef char *Character;
typedef unsigned int Length;
#define PTR(id) id
#define LEN(id,len) len
#define GETLEN(id) id ## _len
#define CHNAME(id) Character id, const Length id ## _len
#define CHNAME_C(id) id, id ## _len
#define CHLEN(id)
#define CHLEN_C(id)
#elif defined(HKS_NT)
typedef char *Character;
typedef unsigned int Length;
#define PTR(id) id
#define LEN(id,len) len
#define GETLEN(id) id ## _len
#define CHNAME(id) Character id, const Length id ## _len
#define CHNAME_C(id) id, id ## _len
#define CHLEN(id)
#define CHLEN_C(id)
#else 
typedef char *Character;
typedef int Length;
#define PTR(id) id
#define LEN(id,len) len
#define GETLEN(id) id ## _len
#define CHNAME(id) Character id
#define CHNAME_C(id) id
#define CHLEN(id) , const Length id ## _len
#define CHLEN_C(id) , id ## _len
#endif


/* FOR_C_H */
#endif
