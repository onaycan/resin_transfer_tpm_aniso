#ifndef ads_CoreFESystemC_h
#define ads_CoreFESystemC_h

// Begin local includes
#include <ads_CoreFragments.h>

/** All record and association types, for the fragment FESystem of the latest level of form Core */

/** A record representing a load case. */
#define ads_Case (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 0))

/** A collection of load cases */
#define ads_CaseCollection (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 1))

#define ads_DofCaseGrid (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 2))

#define ads_DofModeComplexNumberPartGrid (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 3))

/** The grid to be used in element-by-element loads output of Generic System. */
#define ads_ElementDofCaseGrid (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 4))

/** The grid to be used in element-by-element matrix output of Generic System. */
#define ads_ElementDofDofGrid (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 5))

/** Base type for finite element systems. FE systems store computation results of modeling tasks. */
#define ads_FESystem (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 6))

/** System load cases. */
#define ads_FESystemCases (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 7))

/** The mesh of the system. */
#define ads_FESystemMesh (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 8))

/** A collection of modes in a system. */
#define ads_FESystemModeCollection (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 9))

/** Association with the results anchor. */
#define ads_FESystemResults (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 10))

/** Set identifying the solver dof order. The size of the set is equal or less than the number of system dofs. */
#define ads_FESystemSolverDofOrdering (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 11))

/** Association with the generator task. */
#define ads_FESystemTask (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 12))

/** Association to store user specific matrices and assign them names. */
#define ads_FESystemUserMatrices (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 13))

/** GenericSystem stores system matrices for a model. The matrices can be generated in different ways, for example with a MatrixGenerationTask. */
#define ads_GenericSystem (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 14))

/** System load matrix - imaginary complex part. */
#define ads_GenericSystemImaginaryLoad (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 15))

/** System load matrix. */
#define ads_GenericSystemLoad (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 16))

/** System mass matrix. */
#define ads_GenericSystemMass (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 17))

/** System stiffness matrix. */
#define ads_GenericSystemStiffness (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 18))

/** System structural damping matrix. */
#define ads_GenericSystemStructuralDamping (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 19))

/** System viscous damping matrix. */
#define ads_GenericSystemViscousDamping (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 20))

/** This record type represents results generated by a modal harmonic or transient event. The original intent of the ModalEventResults was to store "internal" data: GU, GA, GV (and KE, SE, and Work for transient). These data could be considered as internal data since physical results (U, V, A) could be potentially recovered ?on demand? based them. However, we also store here data that can be considered output (KE, SE, and Work for harmonic event) because we want to be consistent between transient and harmonic. */
#define ads_ModalEventResults (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 21))

/** Physical accelerations. TO DO: store this in the regular "results" part of the data model, and not associated to ModalEventResults. Recovered output variables should only appear as regular output fields (whether they are output at the dofs or at the nodes). */
#define ads_ModalEventResultsA (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 22))

/** Total kinematic energy. */
#define ads_ModalEventResultsAllKE (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 23))

/** Total strain energy. */
#define ads_ModalEventResultsAllSE (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 24))

/** Total external work. */
#define ads_ModalEventResultsAllWork (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 25))

/** An association between a modal event and it's computation data. */
#define ads_ModalEventResultsEvent (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 26))

/** Discrete frequency (harmonic) or time (transient) values. ### TBD: Should this be an association with the specification? */
#define ads_ModalEventResultsFrameValues (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 27))

/** Generalized accelerations. In the case of Random Response, we store variance matrix of generalized accelerations */
#define ads_ModalEventResultsGA (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 28))

/** Generalized displacements. In the case of Random Response, we store variance matrix of generalized displacements */
#define ads_ModalEventResultsGU (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 29))

/** Generalized velocities. In the case of Random Response, we store variance matrix of generalized velocities */
#define ads_ModalEventResultsGV (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 30))

/** Kinetic energy per mode. */
#define ads_ModalEventResultsKE (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 31))

/** Generalized displacement PSDs in the case of Random Response */
#define ads_ModalEventResultsPSDGU (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 32))

/** Reaction forces. */
#define ads_ModalEventResultsRF (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 33))

/** Association with the results anchor. */
#define ads_ModalEventResultsResults (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 34))

/** Strain energy per mode. */
#define ads_ModalEventResultsSE (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 35))

/** Physical displacements. TO DO: store this in the regular "results" part of the data model, and not associated to ModalEventResults. Recovered output variables should only appear as regular output fields (whether they are output at the dofs or at the nodes). */
#define ads_ModalEventResultsU (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 36))

/** Physical velocities. TO DO: store this in the regular "results" part of the data model, and not associated to ModalEventResults. Recovered output variables should only appear as regular output fields (whether they are output at the dofs or at the nodes). */
#define ads_ModalEventResultsV (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 37))

/** External work per mode. */
#define ads_ModalEventResultsWork (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 38))

/** Modal representation of a system. Examples of tasks that can generate a modal system: FrequencyTask, ComplexFrequencyTask, and BuckleTask. */
#define ads_ModalSystem (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 39))

/** Modal acoustic-structural coupling matrix. */
#define ads_ModalSystemAcousticCoupling (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 40))

/** Dof-based acoustic-structural coupling matrix. */
#define ads_ModalSystemAcousticDofCoupling (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 41))

/** Set identifying the acoustic modes. */
#define ads_ModalSystemAcousticModes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 42))

/** Acoustic modal viscous damping matrix. */
#define ads_ModalSystemAcousticViscousDamping (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 43))

/** Associates a modal system with the damping ratio of compex modes. */
#define ads_ModalSystemComplexDampingRatio (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 44))

/** Associates a modal system with a composite damping matrix. */
#define ads_ModalSystemCompositeDamping (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 45))

/** Associates a modal system with an effective mass matrix. */
#define ads_ModalSystemEffectiveMass (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 46))

/** Associates ModalSystem to the distribution which stores the Eigenvalue sensitivities. This distribution maps {mode,parameter,complexNumberPart} --> double VALUE, where VALUE is defined to be: ( del eigenvalue_mode / del parameter) (take given complexNumberPart). */
#define ads_ModalSystemEigenvalueSensitivities (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 47))

/** The eigenvalues of the modal system. */
#define ads_ModalSystemEigenvalues (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 48))

/** Associates a modal system with a generalized mass matrix. */
#define ads_ModalSystemGeneralizedMass (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 49))

/** Mode shapes imaginary part. */
#define ads_ModalSystemImaginaryModeShapes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 50))

/** Mode shapes (real). */
#define ads_ModalSystemModeShapes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 51))

/** Associates a modal system with a matrix of participation factors. */
#define ads_ModalSystemParticipationFactors (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 52))

/** Projected mode shapes imaginary part. */
#define ads_ModalSystemProjectedImaginaryModeShapes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 53))

/** Projected mode shapes (real). */
#define ads_ModalSystemProjectedModeShapes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 54))

/** Set identifying the residual modes. */
#define ads_ModalSystemResidualModes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 55))

/** Stiffness matrix */
#define ads_ModalSystemStiffness (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 56))

/** Modal structural damping matrix. */
#define ads_ModalSystemStructuralDamping (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 57))

/** Set identifying the structural modes. */
#define ads_ModalSystemStructuralModes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 58))

/** Modal viscous damping matrix. */
#define ads_ModalSystemViscousDamping (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 59))

#define ads_ModeModeComplexNumberPartGrid (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 60))

/** Used for PSD matrix of generalized responses in Random Response */
#define ads_ModeModeFrequencyComplexNumberPartGrid (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 61))

/** Used for variance matrix of generalized responses in Random Response */
#define ads_ModeModeFrequencyGrid (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 62))

#define ads_ModeSpectrumGrid (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 63))

/** Collection of load cases. Load cases are used as dimensions in distributions and thus they need a collection. Tasks will have their own associations with Case records used in those tasks. */
#define ads_SpecificationsCaseCollection (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 64))

/** SubstructureSystem stores matrices for a substructure. */
#define ads_SubstructureSystem (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 65))

/** Substructure load cases. */
#define ads_SubstructureSystemCaseCollection (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 66))

/** Coordinates of the center of mass of the substructure system. */
#define ads_SubstructureSystemCenterOfMass (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 67))

/** The eigenvalues of the substructure system. */
#define ads_SubstructureSystemEigenvalues (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 68))

#define ads_SubstructureSystemEnergy (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 69))

#define ads_SubstructureSystemLoad (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 70))

/** Lumped mass of the substructure system. */
#define ads_SubstructureSystemLumpedMass (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 71))

#define ads_SubstructureSystemMass (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 72))

/** The mode shapes of the substructure system. */
#define ads_SubstructureSystemModeShapes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 73))

/** Element sets for output. */
#define ads_SubstructureSystemOutputElementSets (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 74))

/** Node sets for output. */
#define ads_SubstructureSystemOutputNodeSets (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 75))

#define ads_SubstructureSystemRecovery (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 76))

/** A set of recovery elements of a substructure system. */
#define ads_SubstructureSystemRecoveryElements (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 77))

/** A set of recovery nodes of a substructure system. */
#define ads_SubstructureSystemRecoveryNodes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 78))

/** Reference nodes of the substructure system. */
#define ads_SubstructureSystemReferenceNodes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 79))

/** A set of retained degrees of freedom of a substructure system. ### TBD: Change this to D-set in the future. -NLY */
#define ads_SubstructureSystemRetainedNodalDofs (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 80))

/** The list of the nodes retained by the user (connection points). */
#define ads_SubstructureSystemRetainedNodes (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 81))

#define ads_SubstructureSystemStiffness (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 82))

#define ads_SubstructureSystemStructuralDamping (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 83))

/** Total volume, mass vector, and rotary inertia tensor of the substructure system. */
#define ads_SubstructureSystemTotalInertia (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 84))

#define ads_SubstructureSystemViscousDamping (ads_CoreFragmentTypeIndex(ads_CoreFESystemFragment, 85))

/** Enum with grid dimensions. */
enum ads_DofCaseGridDimensionsEnm
{
    ads_DofCaseGrid_case,
    ads_DofCaseGrid_dof
};

/** Enum with grid dimensions. */
enum ads_DofModeComplexNumberPartGridDimensionsEnm
{
    ads_DofModeComplexNumberPartGrid_complex,
    ads_DofModeComplexNumberPartGrid_dof,
    ads_DofModeComplexNumberPartGrid_mode
};

/** 
Enum with grid dimensions. */
enum ads_ElementDofCaseGridDimensionsEnm
{
    ads_ElementDofCaseGrid_case,
    ads_ElementDofCaseGrid_dof,
    ads_ElementDofCaseGrid_element
};

/** 
Enum with grid dimensions. */
enum ads_ElementDofDofGridDimensionsEnm
{
    ads_ElementDofDofGrid_column,
    ads_ElementDofDofGrid_element,
    ads_ElementDofDofGrid_row
};

/** 
Enum with association roles. */
enum ads_FESystemCasesRolesEnm
{
    ads_FESystemCases_cases,
    ads_FESystemCases_system
};

/** 
Enum with association roles. */
enum ads_FESystemMeshRolesEnm
{
    ads_FESystemMesh_mesh,
    ads_FESystemMesh_system
};

/** 
Enum with association roles. */
enum ads_FESystemModeCollectionRolesEnm
{
    ads_FESystemModeCollection_modes,
    ads_FESystemModeCollection_system
};

/** 
Enum with association roles. */
enum ads_FESystemResultsRolesEnm
{
    ads_FESystemResults_results,
    ads_FESystemResults_system
};

/** 
Enum with association roles. */
enum ads_FESystemSolverDofOrderingRolesEnm
{
    ads_FESystemSolverDofOrdering_solverDofOrdering,
    ads_FESystemSolverDofOrdering_system
};

/** 
Enum with association roles. */
enum ads_FESystemTaskRolesEnm
{
    ads_FESystemTask_system,
    ads_FESystemTask_task
};

/** 
Enum with association roles. */
enum ads_FESystemUserMatricesRolesEnm
{
    ads_FESystemUserMatrices_system,
    ads_FESystemUserMatrices_userMatrices
};

/** 
Enum with association roles. */
enum ads_GenericSystemImaginaryLoadRolesEnm
{
    ads_GenericSystemImaginaryLoad_load,
    ads_GenericSystemImaginaryLoad_system
};

/** 
Enum with association roles. */
enum ads_GenericSystemLoadRolesEnm
{
    ads_GenericSystemLoad_load,
    ads_GenericSystemLoad_system
};

/** 
Enum with association roles. */
enum ads_GenericSystemMassRolesEnm
{
    ads_GenericSystemMass_mass,
    ads_GenericSystemMass_system
};

/** 
Enum with association roles. */
enum ads_GenericSystemStiffnessRolesEnm
{
    ads_GenericSystemStiffness_stiffness,
    ads_GenericSystemStiffness_system
};

/** 
Enum with association roles. */
enum ads_GenericSystemStructuralDampingRolesEnm
{
    ads_GenericSystemStructuralDamping_structuralDamping,
    ads_GenericSystemStructuralDamping_system
};

/** 
Enum with association roles. */
enum ads_GenericSystemViscousDampingRolesEnm
{
    ads_GenericSystemViscousDamping_system,
    ads_GenericSystemViscousDamping_viscousDamping
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsARolesEnm
{
    ads_ModalEventResultsA_a,
    ads_ModalEventResultsA_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsAllKERolesEnm
{
    ads_ModalEventResultsAllKE_allKE,
    ads_ModalEventResultsAllKE_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsAllSERolesEnm
{
    ads_ModalEventResultsAllSE_allSE,
    ads_ModalEventResultsAllSE_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsAllWorkRolesEnm
{
    ads_ModalEventResultsAllWork_allWork,
    ads_ModalEventResultsAllWork_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsEventRolesEnm
{
    ads_ModalEventResultsEvent_event,
    ads_ModalEventResultsEvent_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsFrameValuesRolesEnm
{
    ads_ModalEventResultsFrameValues_frameValues,
    ads_ModalEventResultsFrameValues_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsGARolesEnm
{
    ads_ModalEventResultsGA_ga,
    ads_ModalEventResultsGA_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsGURolesEnm
{
    ads_ModalEventResultsGU_gu,
    ads_ModalEventResultsGU_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsGVRolesEnm
{
    ads_ModalEventResultsGV_gv,
    ads_ModalEventResultsGV_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsKERolesEnm
{
    ads_ModalEventResultsKE_ke,
    ads_ModalEventResultsKE_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsPSDGURolesEnm
{
    ads_ModalEventResultsPSDGU_psdgu,
    ads_ModalEventResultsPSDGU_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsRFRolesEnm
{
    ads_ModalEventResultsRF_results,
    ads_ModalEventResultsRF_rf
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsResultsRolesEnm
{
    ads_ModalEventResultsResults_eventResults,
    ads_ModalEventResultsResults_results
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsSERolesEnm
{
    ads_ModalEventResultsSE_results,
    ads_ModalEventResultsSE_se
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsURolesEnm
{
    ads_ModalEventResultsU_results,
    ads_ModalEventResultsU_u
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsVRolesEnm
{
    ads_ModalEventResultsV_results,
    ads_ModalEventResultsV_v
};

/** 
Enum with association roles. */
enum ads_ModalEventResultsWorkRolesEnm
{
    ads_ModalEventResultsWork_results,
    ads_ModalEventResultsWork_work
};

/** 
Enum with association roles. */
enum ads_ModalSystemAcousticCouplingRolesEnm
{
    ads_ModalSystemAcousticCoupling_acousticCoupling,
    ads_ModalSystemAcousticCoupling_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemAcousticDofCouplingRolesEnm
{
    ads_ModalSystemAcousticDofCoupling_acousticDofCoupling,
    ads_ModalSystemAcousticDofCoupling_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemAcousticModesRolesEnm
{
    ads_ModalSystemAcousticModes_acousticModes,
    ads_ModalSystemAcousticModes_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemAcousticViscousDampingRolesEnm
{
    ads_ModalSystemAcousticViscousDamping_acousticViscousDamping,
    ads_ModalSystemAcousticViscousDamping_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemComplexDampingRatioRolesEnm
{
    ads_ModalSystemComplexDampingRatio_complexDampingRatio,
    ads_ModalSystemComplexDampingRatio_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemCompositeDampingRolesEnm
{
    ads_ModalSystemCompositeDamping_compositeDamping,
    ads_ModalSystemCompositeDamping_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemEffectiveMassRolesEnm
{
    ads_ModalSystemEffectiveMass_effectiveMass,
    ads_ModalSystemEffectiveMass_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemEigenvalueSensitivitiesRolesEnm
{
    ads_ModalSystemEigenvalueSensitivities_eigenvalueSensitivities,
    ads_ModalSystemEigenvalueSensitivities_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemEigenvaluesRolesEnm
{
    ads_ModalSystemEigenvalues_eigenvalues,
    ads_ModalSystemEigenvalues_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemGeneralizedMassRolesEnm
{
    ads_ModalSystemGeneralizedMass_generalizedMass,
    ads_ModalSystemGeneralizedMass_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemImaginaryModeShapesRolesEnm
{
    ads_ModalSystemImaginaryModeShapes_modeShapes,
    ads_ModalSystemImaginaryModeShapes_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemModeShapesRolesEnm
{
    ads_ModalSystemModeShapes_modeShapes,
    ads_ModalSystemModeShapes_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemParticipationFactorsRolesEnm
{
    ads_ModalSystemParticipationFactors_participationFactors,
    ads_ModalSystemParticipationFactors_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemProjectedImaginaryModeShapesRolesEnm
{
    ads_ModalSystemProjectedImaginaryModeShapes_modeShapes,
    ads_ModalSystemProjectedImaginaryModeShapes_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemProjectedModeShapesRolesEnm
{
    ads_ModalSystemProjectedModeShapes_modeShapes,
    ads_ModalSystemProjectedModeShapes_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemResidualModesRolesEnm
{
    ads_ModalSystemResidualModes_residualModes,
    ads_ModalSystemResidualModes_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemStiffnessRolesEnm
{
    ads_ModalSystemStiffness_stiffness,
    ads_ModalSystemStiffness_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemStructuralDampingRolesEnm
{
    ads_ModalSystemStructuralDamping_structuralDamping,
    ads_ModalSystemStructuralDamping_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemStructuralModesRolesEnm
{
    ads_ModalSystemStructuralModes_structuralModes,
    ads_ModalSystemStructuralModes_system
};

/** 
Enum with association roles. */
enum ads_ModalSystemViscousDampingRolesEnm
{
    ads_ModalSystemViscousDamping_system,
    ads_ModalSystemViscousDamping_viscousDamping
};

/** Enum with grid dimensions. */
enum ads_ModeModeComplexNumberPartGridDimensionsEnm
{
    ads_ModeModeComplexNumberPartGrid_column,
    ads_ModeModeComplexNumberPartGrid_complex,
    ads_ModeModeComplexNumberPartGrid_row
};

/** 
Enum with grid dimensions. */
enum ads_ModeModeFrequencyComplexNumberPartGridDimensionsEnm
{
    ads_ModeModeFrequencyComplexNumberPartGrid_column,
    ads_ModeModeFrequencyComplexNumberPartGrid_complex,
    ads_ModeModeFrequencyComplexNumberPartGrid_frequency,
    ads_ModeModeFrequencyComplexNumberPartGrid_row
};

/** 
Enum with grid dimensions. */
enum ads_ModeModeFrequencyGridDimensionsEnm
{
    ads_ModeModeFrequencyGrid_column,
    ads_ModeModeFrequencyGrid_frequency,
    ads_ModeModeFrequencyGrid_row
};

/** Enum with grid dimensions. */
enum ads_ModeSpectrumGridDimensionsEnm
{
    ads_ModeSpectrumGrid_column,
    ads_ModeSpectrumGrid_row
};

/** 
Enum with association roles. */
enum ads_SpecificationsCaseCollectionRolesEnm
{
    ads_SpecificationsCaseCollection_cases,
    ads_SpecificationsCaseCollection_specifications
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemCaseCollectionRolesEnm
{
    ads_SubstructureSystemCaseCollection_cases,
    ads_SubstructureSystemCaseCollection_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemCenterOfMassRolesEnm
{
    ads_SubstructureSystemCenterOfMass_center,
    ads_SubstructureSystemCenterOfMass_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemEigenvaluesRolesEnm
{
    ads_SubstructureSystemEigenvalues_eigenvalues,
    ads_SubstructureSystemEigenvalues_system
};

/** Enum with association roles. */
enum ads_SubstructureSystemEnergyRolesEnm
{
    ads_SubstructureSystemEnergy_energy,
    ads_SubstructureSystemEnergy_system
};

/** Enum with association roles. */
enum ads_SubstructureSystemLoadRolesEnm
{
    ads_SubstructureSystemLoad_load,
    ads_SubstructureSystemLoad_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemLumpedMassRolesEnm
{
    ads_SubstructureSystemLumpedMass_lumped,
    ads_SubstructureSystemLumpedMass_system
};

/** Enum with association roles. */
enum ads_SubstructureSystemMassRolesEnm
{
    ads_SubstructureSystemMass_mass,
    ads_SubstructureSystemMass_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemModeShapesRolesEnm
{
    ads_SubstructureSystemModeShapes_modeShapes,
    ads_SubstructureSystemModeShapes_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemOutputElementSetsRolesEnm
{
    ads_SubstructureSystemOutputElementSets_elset,
    ads_SubstructureSystemOutputElementSets_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemOutputNodeSetsRolesEnm
{
    ads_SubstructureSystemOutputNodeSets_nset,
    ads_SubstructureSystemOutputNodeSets_system
};

/** Enum with association roles. */
enum ads_SubstructureSystemRecoveryRolesEnm
{
    ads_SubstructureSystemRecovery_recovery,
    ads_SubstructureSystemRecovery_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemRecoveryElementsRolesEnm
{
    ads_SubstructureSystemRecoveryElements_recoveryElements,
    ads_SubstructureSystemRecoveryElements_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemRecoveryNodesRolesEnm
{
    ads_SubstructureSystemRecoveryNodes_recoveryNodes,
    ads_SubstructureSystemRecoveryNodes_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemReferenceNodesRolesEnm
{
    ads_SubstructureSystemReferenceNodes_nodes,
    ads_SubstructureSystemReferenceNodes_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemRetainedNodalDofsRolesEnm
{
    ads_SubstructureSystemRetainedNodalDofs_retainedDofs,
    ads_SubstructureSystemRetainedNodalDofs_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemRetainedNodesRolesEnm
{
    ads_SubstructureSystemRetainedNodes_retainedNodes,
    ads_SubstructureSystemRetainedNodes_system
};

/** Enum with association roles. */
enum ads_SubstructureSystemStiffnessRolesEnm
{
    ads_SubstructureSystemStiffness_stiffness,
    ads_SubstructureSystemStiffness_system
};

/** Enum with association roles. */
enum ads_SubstructureSystemStructuralDampingRolesEnm
{
    ads_SubstructureSystemStructuralDamping_structuralDamping,
    ads_SubstructureSystemStructuralDamping_system
};

/** 
Enum with association roles. */
enum ads_SubstructureSystemTotalInertiaRolesEnm
{
    ads_SubstructureSystemTotalInertia_inertia,
    ads_SubstructureSystemTotalInertia_system
};

/** Enum with association roles. */
enum ads_SubstructureSystemViscousDampingRolesEnm
{
    ads_SubstructureSystemViscousDamping_system,
    ads_SubstructureSystemViscousDamping_viscousDamping
};

#endif
